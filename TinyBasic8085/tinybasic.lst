                        ; Adapted to generic 8085 and using SID/SOD for serial input/output
                        ; Assumes 32KB ROM, 32KB RAM
                        ; Essentially, you can use this with any 8085-based system as long as you can bring
                        ; SID/SOD out e.g. to an FTDI connector.
                        ; Modified by Ben Chong
                        ; Successfully cross-assembled by ASMX 2.0b6 on Mac OS X

                        ;*************************************************************
                        ;
                        ;                 TINY BASIC FOR INTEL 8080
                        ;                       VERSION 2.0
                        ;                     BY LI-CHEN WANG
                        ;                  MODIFIED AND TRANSLATED
                        ;                    TO INTEL MNEMONICS
                        ;                     BY ROGER RAUSKOLB
                        ;                      10 OCTOBER,1976
                        ;                        @COPYLEFT
                        ;                   ALL WRONGS RESERVED
                        ;
                        ;*************************************************************
                        ;
                        ; *** ZERO PAGE SUBROUTINES ***
                        ;
                        ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
                        ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
                        ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
                        ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
                        ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
                        ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
                        ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
                        ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
                        ;
                        DWA     MACRO   WHERE
                                DB   ((WHERE >> 8) + 128)
                                DB   (WHERE & 0FFH)
                                ENDM
                        ;
0000                            ORG  0H
0000  31 00FF           START:  LXI  SP,STACK                   ;*** COLD START ***
0003  3E FF                     MVI  A,0FFH
0005  C3 5806                   JMP  INIT
                        ;
0008  E3                        XTHL                            ;*** TSTC OR RST 1 ***
0009  EF                        RST  5                          ;IGNORE BLANKS AND
000A  BE                        CMP  M                          ;TEST CHARACTER
000B  C3 6800                   JMP  TC1                        ;REST OF THIS IS AT TC1
                        ;
000E  3E 0D             CRLF:   MVI  A,CR                       ;*** CRLF ***
                        ;
0010  F5                        PUSH PSW                        ;*** OUTC OR RST 2 ***
0011  3A 0080                   LDA  OCSW                       ;PRINT CHARACTER ONLY
0014  B7                        ORA  A                          ;IF OCSW SWITCH IS ON
0015  C3 7D06                   JMP  OC2                        ;REST OF THIS IS AT OC2
                        ;
0018  CD 8703                   CALL EXPR2                      ;*** EXPR OR RST 3 ***
001B  E5                        PUSH H                          ;EVALUATE AN EXPRESSION
001C  C3 4303                   JMP  EXPR1                      ;REST OF IT AT EXPR1
001F  57                        DB   'W'
                        ;
0020  7C                        MOV  A,H                        ;*** COMP OR RST 4 ***
0021  BA                        CMP  D                          ;COMPARE HL WITH DE
0022  C0                        RNZ                             ;RETURN CORRECT C AND
0023  7D                        MOV  A,L                        ;Z FLAGS
0024  BB                        CMP  E                          ;BUT OLD A IS LOST
0025  C9                        RET
0026  414E                      DB   'AN'
                        ;
0028  1A                SS1:    LDAX D                          ;*** IGNBLK/RST 5 ***
0029  FE 20                     CPI  20H                        ;IGNORE BLANKS
002B  C0                        RNZ                             ;IN TEXT (WHERE DE->)
002C  13                        INX  D                          ;AND RETURN THE FIRST
002D  C3 2800                   JMP  SS1                        ;NON-BLANK CHAR. IN A
                        ;
0030  F1                        POP  PSW                        ;*** FINISH/RST 6 ***
0031  CD C904                   CALL FIN                        ;CHECK END OF COMMAND
0034  C3 DC04                   JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
0037  47                        DB   'G'
                        ;
0038  EF                        RST  5                          ;*** TSTV OR RST 7 ***
0039  D6 40                     SUI  40H                        ;TEST VARIABLES
003B  D8                        RC                              ;C:NOT A VARIABLE
003C  C2 5800                   JNZ  TV1                        ;NOT "@" ARRAY
003F  13                        INX  D                          ;IT IS THE "@" ARRAY
0040  CD 3004                   CALL PARN                       ;@ SHOULD BE FOLLOWED
0043  29                        DAD  H                          ;BY (EXPR) AS ITS INDEX
0044  DA 9F00                   JC   QHOW                       ;IS INDEX TOO BIG?
0047  D5                        PUSH D                          ;WILL IT OVERWRITE
0048  EB                        XCHG                            ;TEXT?
0049  CD 6F04                   CALL SIZE                       ;FIND SIZE OF FREE
004C  E7                        RST  4                          ;AND CHECK THAT
004D  DA 0A05                   JC   ASORRY                     ;IF SO, SAY "SORRY"
0050  21 00FE                   LXI  H,VARBGN                   ;IF NOT GET ADDRESS
0053  CD 9204                   CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0056  D1                        POP  D                          ;IN HL
0057  C9                        RET                             ;C FLAG IS CLEARED
0058  FE 1B             TV1:    CPI  1BH                        ;NOT @, IS IT A TO Z?
005A  3F                        CMC                             ;IF NOT RETURN C FLAG
005B  D8                        RC
005C  13                        INX  D                          ;IF A THROUGH Z
005D  21 00FE                   LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
0060  07                        RLC                             ;THAT VARIABLE
0061  85                        ADD  L                          ;AND RETURN IT IN HL
0062  6F                        MOV  L,A                        ;WITH C FLAG CLEARED
0063  3E 00                     MVI  A,0
0065  8C                        ADC  H
0066  67                        MOV  H,A
0067  C9                        RET
                        ;
                        ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
                        ;       RST  5                          ;THIS IS AT LOC. 8
                        ;       CMP  M                          ;AND THEN JUMP HERE
0068  23                TC1:    INX  H                          ;COMPARE THE BYTE THAT
0069  CA 7300                   JZ   TC2                        ;FOLLOWS THE RST INST.
006C  C5                        PUSH B                          ;WITH THE TEXT (DE->)
006D  4E                        MOV  C,M                        ;IF NOT =, ADD THE 2ND
006E  06 00                     MVI  B,0                        ;BYTE THAT FOLLOWS THE
0070  09                        DAD  B                          ;RST TO THE OLD PC
0071  C1                        POP  B                          ;I.E., DO A RELATIVE
0072  1B                        DCX  D                          ;JUMP IF NOT =
0073  13                TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
0074  23                        INX  H                          ;AND CONTINUE
0075  E3                        XTHL
0076  C9                        RET
                        ;
0077  21 0000           TSTNUM: LXI  H,0                        ;*** TSTNUM ***
007A  44                        MOV  B,H                        ;TEST IF THE TEXT IS
007B  EF                        RST  5                          ;A NUMBER
007C  FE 30             TN1:    CPI  30H                        ;IF NOT, RETURN 0 IN
007E  D8                        RC                              ;B AND HL
007F  FE 3A                     CPI  3AH                        ;IF NUMBERS, CONVERT
0081  D0                        RNC                             ;TO BINARY IN HL AND
0082  3E F0                     MVI  A,0F0H                     ;SET B TO # OF DIGITS
0084  A4                        ANA  H                          ;IF H>255, THERE IS NO
0085  C2 9F00                   JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
0088  04                        INR  B                          ;B COUNTS # OF DIGITS
0089  C5                        PUSH B
008A  44                        MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
008B  4D                        MOV  C,L
008C  29                        DAD  H                          ;WHERE 10* IS DONE BY
008D  29                        DAD  H                          ;SHIFT AND ADD
008E  09                        DAD  B
008F  29                        DAD  H
0090  1A                        LDAX D                          ;AND (DIGIT) IS FROM
0091  13                        INX  D                          ;STRIPPING THE ASCII
0092  E6 0F                     ANI  0FH                        ;CODE
0094  85                        ADD  L
0095  6F                        MOV  L,A
0096  3E 00                     MVI  A,0
0098  8C                        ADC  H
0099  67                        MOV  H,A
009A  C1                        POP  B
009B  1A                        LDAX D                          ;DO THIS DIGIT AFTER
009C  F2 7C00                   JP   TN1                        ;DIGIT. S SAYS OVERFLOW
009F  D5                QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
00A0  11 A600           AHOW:   LXI  D,HOW
00A3  C3 E004                   JMP  ERROR
00A6  484F573F          HOW:    DB   'HOW?'
00AA  0D                        DB   CR
00AB  4F4B              OK:     DB   'OK'
00AD  0D                        DB   CR
00AE  57484154 3F       WHAT:   DB   'WHAT?'
00B3  0D                        DB   CR
00B4  534F5252 59       SORRY:  DB   'SORRY'
00B9  0D                        DB   CR
                        ;
                        ;*************************************************************
                        ;
                        ; *** MAIN ***
                        ;
                        ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
                        ; AND STORES IT IN THE MEMORY.
                        ;
                        ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
                        ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
                        ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
                        ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
                        ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
                        ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
                        ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
                        ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
                        ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
                        ;
                        ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
                        ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
                        ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
                        ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
                        ;
                        ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
                        ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
                        ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
                        ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
                        ;
                        ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
                        ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
                        ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
                        ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
                        ;
00BA  31 00FF           RSTART: LXI  SP,STACK
00BD  3E 00             		MVI a, 0
00BF  32 1780           		STA Saving
00C2  CD 0E00           ST1:    CALL CRLF                       ;AND JUMP TO HERE
00C5  11 AB00                   LXI  D,OK                       ;DE->STRING
00C8  97                        SUB  A                          ;A=0
00C9  CD 7605                   CALL PRTSTG                     ;PRINT STRING UNTIL CR
00CC  21 D300                   LXI  H,ST2+1                    ;LITERAL 0
00CF  22 0180                   SHLD CURRNT                     ;CURRENT->LINE # = 0
00D2  21 0000           ST2:    LXI  H,0
00D5  22 0980                   SHLD LOPVAR
00D8  22 0380                   SHLD STKGOS
00DB  3E 3E             ST3:    MVI  A,3EH                      ;PROMPT '>' AND
00DD  CD 1005                   CALL GETLN                      ;READ A LINE
00E0  D5                        PUSH D                          ;DE->END OF LINE
00E1  11 37FE                   LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
00E4  CD 7700                   CALL TSTNUM                     ;TEST IF IT IS A NUMBER
00E7  EF                        RST  5
00E8  7C                        MOV  A,H                        ;HL=VALUE OF THE # OR
00E9  B5                        ORA  L                          ;0 IF NO # WAS FOUND
00EA  C1                        POP  B                          ;BC->END OF LINE
00EB  CA 5607                   JZ   DIRECT
00EE  1B                        DCX  D                          ;BACKUP DE AND SAVE
00EF  7C                        MOV  A,H                        ;VALUE OF LINE # THERE
00F0  12                        STAX D
00F1  1B                        DCX  D
00F2  7D                        MOV  A,L
00F3  12                        STAX D
00F4  C5                        PUSH B                          ;BC,DE->BEGIN, END
00F5  D5                        PUSH D
00F6  79                        MOV  A,C
00F7  93                        SUB  E
00F8  F5                        PUSH PSW                        ;A=# OF BYTES IN LINE
00F9  CD 4E05                   CALL FNDLN                      ;FIND THIS LINE IN SAVE
00FC  D5                        PUSH D                          ;AREA, DE->SAVE AREA
00FD  C2 1001                   JNZ  ST4                        ;NZ:NOT FOUND, INSERT
0100  D5                        PUSH D                          ;Z:FOUND, DELETE IT
0101  CD 6A05                   CALL FNDNXT                     ;FIND NEXT LINE
                                                                ;DE->NEXT LINE
0104  C1                        POP  B                          ;BC->LINE TO BE DELETED
0105  2A 1580                   LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
0108  CD FB05                   CALL MVUP                       ;MOVE UP TO DELETE
010B  60                        MOV  H,B                        ;TXTUNF->UNFILLED AREA
010C  69                        MOV  L,C
010D  22 1580                   SHLD TXTUNF                     ;UPDATE
0110  C1                ST4:    POP  B                          ;GET READY TO INSERT
0111  2A 1580                   LHLD TXTUNF                     ;BUT FIRST CHECK IF
0114  F1                        POP  PSW                        ;THE LENGTH OF NEW LINE
0115  E5                        PUSH H                          ;IS 3 (LINE # AND CR)
0116  FE 03                     CPI  3                          ;THEN DO NOT INSERT
0118  CA BA00                   JZ   RSTART                     ;MUST CLEAR THE STACK
011B  85                        ADD  L                          ;COMPUTE NEW TXTUNF
011C  6F                        MOV  L,A
011D  3E 00                     MVI  A,0
011F  8C                        ADC  H
0120  67                        MOV  H,A                        ;HL->NEW UNFILLED AREA
0121  11 00FE                   LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
0124  E7                        RST  4                          ;IS ENOUGH SPACE
0125  D2 0905                   JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
0128  22 1580                   SHLD TXTUNF                     ;OK, UPDATE TXTUNF
012B  D1                        POP  D                          ;DE->OLD UNFILLED AREA
012C  CD 0406                   CALL MVDOWN
012F  D1                        POP  D                          ;DE->BEGIN, HL->END
0130  E1                        POP  H
0131  CD FB05                   CALL MVUP                       ;MOVE NEW LINE TO SAVE
0134  C3 DB00                   JMP  ST3                        ;AREA
                        ;
                        ;*************************************************************
                        ;
                        ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
                        ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
                        ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
                        ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
                        ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
                        ;
                        ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
                        ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
                        ; GO BACK TO 'RSTART'.
                        ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
                        ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
                        ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
                        ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
                        ;*************************************************************
                        ;
                        ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
                        ;
                        ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
                        ;
                        ; 'STOP(CR)' GOES BACK TO 'RSTART'
                        ;
                        ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
                        ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
                        ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
                        ;
                        ; THERE ARE 3 MORE ENTRIES IN 'RUN':
                        ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
                        ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
                        ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
                        ;
                        ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
                        ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
                        ;
0137  CD D804           NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
013A  21 1880                   LXI  H,TXTBGN
013D  22 1580                   SHLD TXTUNF
                        ;
0140  CD D804           STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
0143  C3 BA00                   JMP  RSTART
                        ;
0146  CD D804           RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
0149  11 1880                   LXI  D,TXTBGN                   ;FIRST SAVED LINE
                        ;
014C  21 0000           RUNNXL: LXI  H,0                        ;*** RUNNXL ***
014F  CD 5605                   CALL FNDLP                      ;FIND WHATEVER LINE #
0152  DA BA00                   JC   RSTART                     ;C:PASSED TXTUNF, QUIT
                        ;
0155  EB                RUNTSL: XCHG                            ;*** RUNTSL ***
0156  22 0180                   SHLD CURRNT                     ;SET 'CURRENT'->LINE #
0159  EB                        XCHG
015A  13                        INX  D                          ;BUMP PASS LINE #
015B  13                        INX  D
                        ;
015C  CD 9406           RUNSML: CALL CHKIO                      ;*** RUNSML ***
015F  21 D506                   LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
0162  C3 5907                   JMP  EXEC                       ;AND EXECUTE IT
                        ;
0165  DF                GOTO:   RST  3                          ;*** GOTO EXPR ***
0166  D5                        PUSH D                          ;SAVE FOR ERROR ROUTINE
0167  CD D804                   CALL ENDCHK                     ;MUST FIND A CR
016A  CD 4E05                   CALL FNDLN                      ;FIND THE TARGET LINE
016D  C2 A000                   JNZ  AHOW                       ;NO SUCH LINE #
0170  F1                        POP  PSW                        ;CLEAR THE PUSH DE
0171  C3 5501                   JMP  RUNTSL                     ;GO DO IT
                        ;
                        ;*************************************************************
                        ;
                        ; *** LIST *** & PRINT ***
                        ;
                        ; LIST HAS TWO FORMS:
                        ; 'LIST(CR)' LISTS ALL SAVED LINES
                        ; 'LIST #(CR)' START LIST AT THIS LINE #
                        ; YOU CAN STOP THE LISTING BY CONTROL C KEY
                        ;
                        ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
                        ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
                        ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
                        ;
                        ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
                        ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
                        ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
                        ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
                        ; SPECIFIED, 6 POSITIONS WILL BE USED.
                        ;
                        ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
                        ; DOUBLE QUOTES.
                        ;
                        ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
                        ;
                        ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
                        ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
                        ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
                        ;
0174                    SAVE:
0174  3E FF             		MVI a, 0FFh
0176  32 1780           		STA Saving
                        		
0179  CD 7700           LIST:   CALL TSTNUM                     ;TEST IF THERE IS A #
017C  CD D804                   CALL ENDCHK                     ;IF NO # WE GET A 0
017F  CD 4E05                   CALL FNDLN                      ;FIND THIS OR NEXT LINE
0182  DA BA00           LS1:    JC   RSTART                     ;C:PASSED TXTUNF
0185  CD E805                   CALL PRTLN                      ;PRINT THE LINE
0188  CD 9406                   CALL CHKIO                      ;STOP IF HIT CONTROL-C
018B  CD 5605                   CALL FNDLP                      ;FIND NEXT LINE
018E  C3 8201                   JMP  LS1                        ;AND LOOP BACK
                        ;
0191  0E 06             PRINT:  MVI  C,6                        ;C = # OF SPACES
0193  CF                        RST  1                          ;IF NULL LIST & ";"
0194  3B                        DB   3BH
0195  06                        DB   PR2-$-1
0196  CD 0E00                   CALL CRLF                       ;GIVE CR-LF AND
0199  C3 5C01                   JMP  RUNSML                     ;CONTINUE SAME LINE
019C  CF                PR2:    RST  1                          ;IF NULL LIST (CR)
019D  0D                        DB   CR
019E  06                        DB   PR0-$-1
019F  CD 0E00                   CALL CRLF                       ;ALSO GIVE CR-LF AND
01A2  C3 4C01                   JMP  RUNNXL                     ;GO TO NEXT LINE
01A5  CF                PR0:    RST  1                          ;ELSE IS IT FORMAT?
01A6  23                        DB   '#'
01A7  05                        DB   PR1-$-1
01A8  DF                        RST  3                          ;YES, EVALUATE EXPR.
01A9  4D                        MOV  C,L                        ;AND SAVE IT IN C
01AA  C3 B301                   JMP  PR3                        ;LOOK FOR MORE TO PRINT
01AD  CD 8205           PR1:    CALL QTSTG                      ;OR IS IT A STRING?
01B0  C3 C001                   JMP  PR8                        ;IF NOT, MUST BE EXPR.
01B3  CF                PR3:    RST  1                          ;IF ",", GO FIND NEXT
01B4  2C                        DB   ','
01B5  06                        DB   PR6-$-1
01B6  CD C904                   CALL FIN                        ;IN THE LIST.
01B9  C3 A501                   JMP  PR0                        ;LIST CONTINUES
01BC  CD 0E00           PR6:    CALL CRLF                       ;LIST ENDS
01BF  F7                        RST  6
01C0  DF                PR8:    RST  3                          ;EVALUATE THE EXPR
01C1  C5                        PUSH B
01C2  CD A805                   CALL PRTNUM                     ;PRINT THE VALUE
01C5  C1                        POP  B
01C6  C3 B301                   JMP  PR3                        ;MORE TO PRINT?
                        ;
01C9                    BEEP:
01C9  06 04             		MVI B, 4
01CB                    BEP0:
01CB  0E AA             		MVI C, 10101010b
01CD  CD 9E07           		CALL sout
01D0  05                		DCR B
01D1  C2 CB01           		JNZ BEP0
01D4  C9                		RET
                        		
                        		
                        ;
                        ;*************************************************************
                        ;
                        ; *** GOSUB *** & RETURN ***
                        ;
                        ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
                        ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
                        ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
                        ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
                        ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
                        ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
                        ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
                        ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
                        ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
                        ;
                        ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
                        ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
                        ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
                        ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
                        ;
01D5  CD 2F06           GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
01D8  DF                        RST  3                          ;PARAMETERS
01D9  D5                        PUSH D                          ;AND TEXT POINTER
01DA  CD 4E05                   CALL FNDLN                      ;FIND THE TARGET LINE
01DD  C2 A000                   JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
01E0  2A 0180                   LHLD CURRNT                     ;FOUND IT, SAVE OLD
01E3  E5                        PUSH H                          ;'CURRNT' OLD 'STKGOS'
01E4  2A 0380                   LHLD STKGOS
01E7  E5                        PUSH H
01E8  21 0000                   LXI  H,0                        ;AND LOAD NEW ONES
01EB  22 0980                   SHLD LOPVAR
01EE  39                        DAD  SP
01EF  22 0380                   SHLD STKGOS
01F2  C3 5501                   JMP  RUNTSL                     ;THEN RUN THAT LINE
01F5  CD D804           RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
01F8  2A 0380                   LHLD STKGOS                     ;OLD STACK POINTER
01FB  7C                        MOV  A,H                        ;0 MEANS NOT EXIST
01FC  B5                        ORA  L
01FD  CA DC04                   JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
0200  F9                        SPHL                            ;ELSE, RESTORE IT
0201  E1                        POP  H
0202  22 0380                   SHLD STKGOS                     ;AND THE OLD 'STKGOS'
0205  E1                        POP  H
0206  22 0180                   SHLD CURRNT                     ;AND THE OLD 'CURRNT'
0209  D1                        POP  D                          ;OLD TEXT POINTER
020A  CD 1306                   CALL POPA                       ;OLD "FOR" PARAMETERS
020D  F7                        RST  6                          ;AND WE ARE BACK HOME
                        ;
                        ;*************************************************************
                        ;
                        ; *** FOR *** & NEXT ***
                        ;
                        ; 'FOR' HAS TWO FORMS:
                        ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
                        ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
                        ; EXP3=1.  (I.E., WITH A STEP OF +1.)
                        ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
                        ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
                        ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
                        ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
                        ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
                        ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
                        ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
                        ; BEFORE THE NEW ONE OVERWRITES IT.
                        ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
                        ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
                        ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
                        ; (PURGED FROM THE STACK..)
                        ;
                        ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
                        ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
                        ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
                        ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
                        ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
                        ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
                        ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
                        ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
                        ; IS PURGED AND EXECUTION CONTINUES.
                        ;
020E  CD 2F06           FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
0211  CD B604                   CALL SETVAL                     ;SET THE CONTROL VAR.
0214  2B                        DCX  H                          ;HL IS ITS ADDRESS
0215  22 0980                   SHLD LOPVAR                     ;SAVE THAT
0218  21 3107                   LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
021B  C3 5907                   JMP  EXEC                       ;FOR THE WORD 'TO'
021E  DF                FR1:    RST  3                          ;EVALUATE THE LIMIT
021F  22 0D80                   SHLD LOPLMT                     ;SAVE THAT
0222  21 3707                   LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
0225  C3 5907                   JMP EXEC                        ;FOR THE WORD 'STEP'
0228  DF                FR2:    RST  3                          ;FOUND IT, GET STEP
0229  C3 2F02                   JMP  FR4
022C  21 0100           FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
022F  22 0B80           FR4:    SHLD LOPINC                     ;SAVE THAT TOO
0232  2A 0180           FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
0235  22 0F80                   SHLD LOPLN
0238  EB                        XCHG                            ;AND TEXT POINTER
0239  22 1180                   SHLD LOPPT
023C  01 0A00                   LXI  B,0AH                      ;DIG INTO STACK TO
023F  2A 0980                   LHLD LOPVAR                     ;FIND 'LOPVAR'
0242  EB                        XCHG
0243  60                        MOV  H,B
0244  68                        MOV  L,B                        ;HL=0 NOW
0245  39                        DAD  SP                         ;HERE IS THE STACK
0246  3E                        DB   3EH
0247  09                FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
0248  7E                        MOV  A,M                        ;GET THAT OLD 'LOPVAR'
0249  23                        INX  H
024A  B6                        ORA  M
024B  CA 6802                   JZ   FR8                        ;0 SAYS NO MORE IN IT
024E  7E                        MOV  A,M
024F  2B                        DCX  H
0250  BA                        CMP  D                          ;SAME AS THIS ONE?
0251  C2 4702                   JNZ  FR7
0254  7E                        MOV  A,M                        ;THE OTHER HALF?
0255  BB                        CMP  E
0256  C2 4702                   JNZ  FR7
0259  EB                        XCHG                            ;YES, FOUND ONE
025A  21 0000                   LXI  H,0H
025D  39                        DAD  SP                         ;TRY TO MOVE SP
025E  44                        MOV  B,H
025F  4D                        MOV  C,L
0260  21 0A00                   LXI  H,0AH
0263  19                        DAD  D
0264  CD 0406                   CALL MVDOWN                     ;AND PURGE 10 WORDS
0267  F9                        SPHL                            ;IN THE STACK
0268  2A 1180           FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
026B  EB                        XCHG
026C  F7                        RST  6                          ;AND CONTINUE
                        ;
026D  FF                NEXT:   RST  7                          ;GET ADDRESS OF VAR.
026E  DA DC04                   JC   QWHAT                      ;NO VARIABLE, "WHAT?"
0271  22 0580                   SHLD VARNXT                     ;YES, SAVE IT
0274  D5                NX0:    PUSH D                          ;SAVE TEXT POINTER
0275  EB                        XCHG
0276  2A 0980                   LHLD LOPVAR                     ;GET VAR. IN 'FOR'
0279  7C                        MOV  A,H
027A  B5                        ORA  L                          ;0 SAYS NEVER HAD ONE
027B  CA DD04                   JZ   AWHAT                      ;SO WE ASK: "WHAT?"
027E  E7                        RST  4                          ;ELSE WE CHECK THEM
027F  CA 8C02                   JZ   NX3                        ;OK, THEY AGREE
0282  D1                        POP  D                          ;NO, LET'S SEE
0283  CD 1306                   CALL POPA                       ;PURGE CURRENT LOOP
0286  2A 0580                   LHLD VARNXT                     ;AND POP ONE LEVEL
0289  C3 7402                   JMP  NX0                        ;GO CHECK AGAIN
028C  5E                NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
028D  23                        INX  H
028E  56                        MOV  D,M                        ;DE=VALUE OF VAR.
028F  2A 0B80                   LHLD LOPINC
0292  E5                        PUSH H
0293  7C                        MOV  A,H
0294  AA                        XRA  D
0295  7A                        MOV  A,D
0296  19                        DAD  D                          ;ADD ONE STEP
0297  FA 9E02                   JM   NX4
029A  AC                        XRA  H
029B  FA C002                   JM   NX5
029E  EB                NX4:    XCHG
029F  2A 0980                   LHLD LOPVAR                     ;PUT IT BACK
02A2  73                        MOV  M,E
02A3  23                        INX  H
02A4  72                        MOV  M,D
02A5  2A 0D80                   LHLD LOPLMT                     ;HL->LIMIT
02A8  F1                        POP  PSW                        ;OLD HL
02A9  B7                        ORA  A
02AA  F2 AE02                   JP   NX1                        ;STEP > 0
02AD  EB                        XCHG                            ;STEP < 0
02AE  CD AE04           NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
02B1  D1                        POP  D                          ;RESTORE TEXT POINTER
02B2  DA C202                   JC   NX2                        ;OUTSIDE LIMIT
02B5  2A 0F80                   LHLD LOPLN                      ;WITHIN LIMIT, GO
02B8  22 0180                   SHLD CURRNT                     ;BACK TO THE SAVED
02BB  2A 1180                   LHLD LOPPT                      ;'CURRNT' AND TEXT
02BE  EB                        XCHG                            ;POINTER
02BF  F7                        RST  6
02C0  E1                NX5:    POP  H
02C1  D1                        POP  D
02C2  CD 1306           NX2:    CALL POPA                       ;PURGE THIS LOOP
02C5  F7                        RST  6
                        ;
                        ;*************************************************************
                        ;
                        ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
                        ;
                        ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
                        ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
                        ;
                        ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
                        ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
                        ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
                        ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
                        ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
                        ; EXECUTION CONTINUES AT THE NEXT LINE.
                        ;
                        ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
                        ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
                        ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
                        ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
                        ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
                        ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
                        ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
                        ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
                        ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
                        ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
                        ;
                        ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
                        ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
                        ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
                        ; THIS IS HANDLED IN 'INPERR'.
                        ;
                        ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
                        ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
                        ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
                        ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
                        ; THIS IS DONE BY 'DEFLT'.
                        ;
02C6  21 0000           REM:    LXI  H,0H                       ;*** REM ***
02C9  3E                        DB   3EH                        ;THIS IS LIKE 'IF 0'
                        ;
02CA  DF                IFF:    RST  3                          ;*** IF ***
02CB  7C                        MOV  A,H                        ;IS THE EXPR.=0?
02CC  B5                        ORA  L
02CD  C2 5C01                   JNZ  RUNSML                     ;NO, CONTINUE
02D0  CD 6C05                   CALL FNDSKP                     ;YES, SKIP REST OF LINE
02D3  D2 5501                   JNC  RUNTSL                     ;AND RUN THE NEXT LINE
02D6  C3 BA00                   JMP  RSTART                     ;IF NO NEXT, RE-START
                        ;
02D9  2A 0780           INPERR: LHLD STKINP                     ;*** INPERR ***
02DC  F9                        SPHL                            ;RESTORE OLD SP
02DD  E1                        POP  H                          ;AND OLD 'CURRNT'
02DE  22 0180                   SHLD CURRNT
02E1  D1                        POP  D                          ;AND OLD TEXT POINTER
02E2  D1                        POP  D                          ;REDO INPUT
                        ;
02E3                    INPUT:                                  ;*** INPUT ***
02E3  D5                IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
02E4  CD 8205                   CALL QTSTG                      ;IS NEXT ITEM A STRING?
02E7  C3 F102                   JMP  IP2                        ;NO
02EA  FF                        RST  7                          ;YES, BUT FOLLOWED BY A
02EB  DA 2B03                   JC   IP4                        ;VARIABLE?   NO.
02EE  C3 0103                   JMP  IP3                        ;YES.  INPUT VARIABLE
02F1  D5                IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
02F2  FF                        RST  7                          ;MUST BE VARIABLE NOW
02F3  DA DC04                   JC   QWHAT                      ;"WHAT?" IT IS NOT?
02F6  1A                        LDAX D                          ;GET READY FOR 'PRTSTR'
02F7  4F                        MOV  C,A
02F8  97                        SUB  A
02F9  12                        STAX D
02FA  D1                        POP  D
02FB  CD 7605                   CALL PRTSTG                     ;PRINT STRING AS PROMPT
02FE  79                        MOV  A,C                        ;RESTORE TEXT
02FF  1B                        DCX  D
0300  12                        STAX D
0301  D5                IP3:    PUSH D                          ;SAVE TEXT POINTER
0302  EB                        XCHG
0303  2A 0180                   LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
0306  E5                        PUSH H
0307  21 E302                   LXI  H,IP1                      ;A NEGATIVE NUMBER
030A  22 0180                   SHLD CURRNT                     ;AS A FLAG
030D  21 0000                   LXI  H,0H                       ;SAVE SP TOO
0310  39                        DAD  SP
0311  22 0780                   SHLD STKINP
0314  D5                        PUSH D                          ;OLD HL
0315  3E 3A                     MVI  A,3AH                      ;PRINT THIS TOO
0317  CD 1005                   CALL GETLN                      ;AND GET A LINE
031A  11 37FE                   LXI  D,BUFFER                   ;POINTS TO BUFFER
031D  DF                        RST  3                          ;EVALUATE INPUT
031E  00                        NOP                             ;CAN BE 'CALL ENDCHK'
031F  00                        NOP
0320  00                        NOP
0321  D1                        POP  D                          ;OK, GET OLD HL
0322  EB                        XCHG
0323  73                        MOV  M,E                        ;SAVE VALUE IN VAR.
0324  23                        INX  H
0325  72                        MOV  M,D
0326  E1                        POP  H                          ;GET OLD 'CURRNT'
0327  22 0180                   SHLD CURRNT
032A  D1                        POP  D                          ;AND OLD TEXT POINTER
032B  F1                IP4:    POP  PSW                        ;PURGE JUNK IN STACK
032C  CF                        RST  1                          ;IS NEXT CH. ','?
032D  2C                        DB   ','
032E  03                        DB   IP5-$-1
032F  C3 E302                   JMP  IP1                        ;YES, MORE ITEMS.
0332  F7                IP5:    RST  6
                        ;
0333  1A                DEFLT:  LDAX D                          ;***  DEFLT ***
0334  FE 0D                     CPI  CR                         ;EMPTY LINE IS OK
0336  CA 4203                   JZ   LT1                        ;ELSE IT IS 'LET'
                        ;
0339  CD B604           LET:    CALL SETVAL                     ;*** LET ***
033C  CF                        RST  1                          ;SET VALUE TO VAR.
033D  2C                        DB   ','
033E  03                        DB   LT1-$-1
033F  C3 3903                   JMP  LET                        ;ITEM BY ITEM
0342  F7                LT1:    RST  6                          ;UNTIL FINISH
                        ;
                        ;*************************************************************
                        ;
                        ; *** EXPR ***
                        ;
                        ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
                        ; <EXPR>::<EXPR2>
                        ;         <EXPR2><REL.OP.><EXPR2>
                        ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
                        ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
                        ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
                        ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
                        ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
                        ; <EXPR4>::=<VARIABLE>
                        ;           <FUNCTION>
                        ;           (<EXPR>)
                        ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
                        ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
                        ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
                        ;
                        ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
                        ;       PUSH H                          ;SAVE <EXPR2> VALUE
0343  21 3F07           EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
0346  C3 5907                   JMP  EXEC                       ;GO DO IT
0349  CD 7203           XP11:   CALL XP18                       ;REL.OP.">="
034C  D8                        RC                              ;NO, RETURN HL=0
034D  6F                        MOV  L,A                        ;YES, RETURN HL=1
034E  C9                        RET
034F  CD 7203           XP12:   CALL XP18                       ;REL.OP."#"
0352  C8                        RZ                              ;FALSE, RETURN HL=0
0353  6F                        MOV  L,A                        ;TRUE, RETURN HL=1
0354  C9                        RET
0355  CD 7203           XP13:   CALL XP18                       ;REL.OP.">"
0358  C8                        RZ                              ;FALSE
0359  D8                        RC                              ;ALSO FALSE, HL=0
035A  6F                        MOV  L,A                        ;TRUE, HL=1
035B  C9                        RET
035C  CD 7203           XP14:   CALL XP18                       ;REL.OP."<="
035F  6F                        MOV  L,A                        ;SET HL=1
0360  C8                        RZ                              ;REL. TRUE, RETURN
0361  D8                        RC
0362  6C                        MOV  L,H                        ;ELSE SET HL=0
0363  C9                        RET
0364  CD 7203           XP15:   CALL XP18                       ;REL.OP."="
0367  C0                        RNZ                             ;FALSE, RETURN HL=0
0368  6F                        MOV  L,A                        ;ELSE SET HL=1
0369  C9                        RET
036A  CD 7203           XP16:   CALL XP18                       ;REL.OP."<"
036D  D0                        RNC                             ;FALSE, RETURN HL=0
036E  6F                        MOV  L,A                        ;ELSE SET HL=1
036F  C9                        RET
0370  E1                XP17:   POP  H                          ;NOT .REL.OP
0371  C9                        RET                             ;RETURN HL=<EXPR2>
0372  79                XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
0373  E1                        POP  H                          ;REL.OP.'S
0374  C1                        POP  B
0375  E5                        PUSH H                          ;REVERSE TOP OF STACK
0376  C5                        PUSH B
0377  4F                        MOV  C,A
0378  CD 8703                   CALL EXPR2                      ;GET 2ND <EXPR2>
037B  EB                        XCHG                            ;VALUE IN DE NOW
037C  E3                        XTHL                            ;1ST <EXPR2> IN HL
037D  CD AE04                   CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
0380  D1                        POP  D                          ;RESTORE TEXT POINTER
0381  21 0000                   LXI  H,0H                       ;SET HL=0, A=1
0384  3E 01                     MVI  A,1
0386  C9                        RET
                        ;
0387  CF                EXPR2:  RST  1                          ;NEGATIVE SIGN?
0388  2D                        DB   '-'
0389  06                        DB   XP21-$-1
038A  21 0000                   LXI  H,0H                       ;YES, FAKE '0-'
038D  C3 B103                   JMP  XP26                       ;TREAT LIKE SUBTRACT
0390  CF                XP21:   RST  1                          ;POSITIVE SIGN? IGNORE
0391  2B                        DB   '+'
0392  00                        DB   XP22-$-1
0393  CD BB03           XP22:   CALL EXPR3                      ;1ST <EXPR3>
0396  CF                XP23:   RST  1                          ;ADD?
0397  2B                        DB   '+'
0398  15                        DB   XP25-$-1
0399  E5                        PUSH H                          ;YES, SAVE VALUE
039A  CD BB03                   CALL EXPR3                      ;GET 2ND <EXPR3>
039D  EB                XP24:   XCHG                            ;2ND IN DE
039E  E3                        XTHL                            ;1ST IN HL
039F  7C                        MOV  A,H                        ;COMPARE SIGN
03A0  AA                        XRA  D
03A1  7A                        MOV  A,D
03A2  19                        DAD  D
03A3  D1                        POP  D                          ;RESTORE TEXT POINTER
03A4  FA 9603                   JM   XP23                       ;1ST AND 2ND SIGN DIFFER
03A7  AC                        XRA  H                          ;1ST AND 2ND SIGN EQUAL
03A8  F2 9603                   JP   XP23                       ;SO IS RESULT
03AB  C3 9F00                   JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
03AE  CF                XP25:   RST  1                          ;SUBTRACT?
03AF  2D                        DB   '-'
03B0  86                        DB   XP42-$-1
03B1  E5                XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
03B2  CD BB03                   CALL EXPR3                      ;GET 2ND <EXPR3>
03B5  CD 9C04                   CALL CHGSGN                     ;NEGATE
03B8  C3 9D03                   JMP  XP24                       ;AND ADD THEM
                        ;
03BB  CD 1B04           EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
03BE  CF                XP31:   RST  1                          ;MULTIPLY?
03BF  2A                        DB   '*'
03C0  2D                        DB   XP34-$-1
03C1  E5                        PUSH H                          ;YES, SAVE 1ST
03C2  CD 1B04                   CALL EXPR4                      ;AND GET 2ND <EXPR4>
03C5  06 00                     MVI  B,0H                       ;CLEAR B FOR SIGN
03C7  CD 9904                   CALL CHKSGN                     ;CHECK SIGN
03CA  E3                        XTHL                            ;1ST IN HL
03CB  CD 9904                   CALL CHKSGN                     ;CHECK SIGN OF 1ST
03CE  EB                        XCHG
03CF  E3                        XTHL
03D0  7C                        MOV  A,H                        ;IS HL > 255 ?
03D1  B7                        ORA  A
03D2  CA DB03                   JZ   XP32                       ;NO
03D5  7A                        MOV  A,D                        ;YES, HOW ABOUT DE
03D6  B2                        ORA  D
03D7  EB                        XCHG                            ;PUT SMALLER IN HL
03D8  C2 A000                   JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
03DB  7D                XP32:   MOV  A,L                        ;THIS IS DUMB
03DC  21 0000                   LXI  H,0H                       ;CLEAR RESULT
03DF  B7                        ORA  A                          ;ADD AND COUNT
03E0  CA 0D04                   JZ   XP35
03E3  19                XP33:   DAD  D
03E4  DA A000                   JC   AHOW                       ;OVERFLOW
03E7  3D                        DCR  A
03E8  C2 E303                   JNZ  XP33
03EB  C3 0D04                   JMP  XP35                       ;FINISHED
03EE  CF                XP34:   RST  1                          ;DIVIDE?
03EF  2F                        DB   '/'
03F0  46                        DB   XP42-$-1
03F1  E5                        PUSH H                          ;YES, SAVE 1ST <EXPR4>
03F2  CD 1B04                   CALL EXPR4                      ;AND GET THE SECOND ONE
03F5  06 00                     MVI  B,0H                       ;CLEAR B FOR SIGN
03F7  CD 9904                   CALL CHKSGN                     ;CHECK SIGN OF 2ND
03FA  E3                        XTHL                            ;GET 1ST IN HL
03FB  CD 9904                   CALL CHKSGN                     ;CHECK SIGN OF 1ST
03FE  EB                        XCHG
03FF  E3                        XTHL
0400  EB                        XCHG
0401  7A                        MOV  A,D                        ;DIVIDE BY 0?
0402  B3                        ORA  E
0403  CA A000                   JZ   AHOW                       ;SAY "HOW?"
0406  C5                        PUSH B                          ;ELSE SAVE SIGN
0407  CD 7C04                   CALL DIVIDE                     ;USE SUBROUTINE
040A  60                        MOV  H,B                        ;RESULT IN HL NOW
040B  69                        MOV  L,C
040C  C1                        POP  B                          ;GET SIGN BACK
040D  D1                XP35:   POP  D                          ;AND TEXT POINTER
040E  7C                        MOV  A,H                        ;HL MUST BE +
040F  B7                        ORA  A
0410  FA 9F00                   JM   QHOW                       ;ELSE IT IS OVERFLOW
0413  78                        MOV  A,B
0414  B7                        ORA  A
0415  FC 9C04                   CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
0418  C3 BE03                   JMP  XP31                       ;LOOK FOR MORE TERMS
                        ;
041B  21 1F07           EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
041E  C3 5907                   JMP  EXEC                       ;AND GO DO IT
0421  FF                XP40:   RST  7                          ;NO, NOT A FUNCTION
0422  DA 2A04                   JC   XP41                       ;NOR A VARIABLE
0425  7E                        MOV  A,M                        ;VARIABLE
0426  23                        INX  H
0427  66                        MOV  H,M                        ;VALUE IN HL
0428  6F                        MOV  L,A
0429  C9                        RET
042A  CD 7700           XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
042D  78                        MOV  A,B                        ;# OF DIGIT
042E  B7                        ORA  A
042F  C0                        RNZ                             ;OK
0430  CF                PARN:   RST  1
0431  28                        DB   '('
0432  05                        DB   XP43-$-1
0433  DF                        RST  3                          ;"(EXPR)"
0434  CF                        RST  1
0435  29                        DB   ')'
0436  01                        DB   XP43-$-1
0437  C9                XP42:   RET
0438  C3 DC04           XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
                        ;
043B  CD 3004           RND:    CALL PARN                       ;*** RND(EXPR) ***
043E  7C                        MOV  A,H                        ;EXPR MUST BE +
043F  B7                        ORA  A
0440  FA 9F00                   JM   QHOW
0443  B5                        ORA  L                          ;AND NON-ZERO
0444  CA 9F00                   JZ   QHOW
0447  D5                        PUSH D                          ;SAVE BOTH
0448  E5                        PUSH H
0449  2A 1380                   LHLD RANPNT                     ;GET MEMORY AS RANDOM
044C  11 6808                   LXI  D,LSTROM                   ;NUMBER
044F  E7                        RST  4
0450  DA 5604                   JC   RA1                        ;WRAP AROUND IF LAST
0453  21 0000                   LXI  H,START
0456  5E                RA1:    MOV  E,M
0457  23                        INX  H
0458  56                        MOV  D,M
0459  22 1380                   SHLD RANPNT
045C  E1                        POP  H
045D  EB                        XCHG
045E  C5                        PUSH B
045F  CD 7C04                   CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
0462  C1                        POP  B
0463  D1                        POP  D
0464  23                        INX  H
0465  C9                        RET
                        ;
0466  CD 3004           ABS:    CALL PARN                       ;*** ABS(EXPR) ***
0469  1B                        DCX  D
046A  CD 9904                   CALL CHKSGN                     ;CHECK SIGN
046D  13                        INX  D
046E  C9                        RET
                        ;
046F  2A 1580           SIZE:   LHLD TXTUNF                     ;*** SIZE ***
0472  D5                        PUSH D                          ;GET THE NUMBER OF FREE
0473  EB                        XCHG                            ;BYTES BETWEEN 'TXTUNF'
0474  21 00FE                   LXI  H,VARBGN                   ;AND 'VARBGN'
0477  CD 9204                   CALL SUBDE
047A  D1                        POP  D
047B  C9                        RET
                        ;
                        ;*************************************************************
                        ;
                        ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
                        ;
                        ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
                        ;
                        ; 'SUBDE' SUBSTRACTS DE FROM HL
                        ;
                        ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
                        ; SIGN AND FLIP SIGN OF B.
                        ;
                        ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
                        ;
                        ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
                        ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
                        ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
                        ;
047C  E5                DIVIDE: PUSH H                          ;*** DIVIDE ***
047D  6C                        MOV  L,H                        ;DIVIDE H BY DE
047E  26 00                     MVI  H,0
0480  CD 8704                   CALL DV1
0483  41                        MOV  B,C                        ;SAVE RESULT IN B
0484  7D                        MOV  A,L                        ;(REMINDER+L)/DE
0485  E1                        POP  H
0486  67                        MOV  H,A
0487  0E FF             DV1:    MVI  C,0FFH                     ;RESULT IN C
0489  0C                DV2:    INR  C                          ;DUMB ROUTINE
048A  CD 9204                   CALL SUBDE                      ;DIVIDE BY SUBTRACT
048D  D2 8904                   JNC  DV2                        ;AND COUNT
0490  19                        DAD  D
0491  C9                        RET
                        ;
0492  7D                SUBDE:  MOV  A,L                        ;*** SUBDE ***
0493  93                        SUB  E                          ;SUBSTRACT DE FROM
0494  6F                        MOV  L,A                        ;HL
0495  7C                        MOV  A,H
0496  9A                        SBB  D
0497  67                        MOV  H,A
0498  C9                        RET
                        ;
0499  7C                CHKSGN: MOV  A,H                        ;*** CHKSGN ***
049A  B7                        ORA  A                          ;CHECK SIGN OF HL
049B  F0                        RP                              ;IF -, CHANGE SIGN
                        ;
049C  7C                CHGSGN: MOV  A,H                        ;*** CHGSGN ***
049D  F5                        PUSH PSW
049E  2F                        CMA                             ;CHANGE SIGN OF HL
049F  67                        MOV  H,A
04A0  7D                        MOV  A,L
04A1  2F                        CMA
04A2  6F                        MOV  L,A
04A3  23                        INX  H
04A4  F1                        POP  PSW
04A5  AC                        XRA  H
04A6  F2 9F00                   JP   QHOW
04A9  78                        MOV  A,B                        ;AND ALSO FLIP B
04AA  EE 80                     XRI  80H
04AC  47                        MOV  B,A
04AD  C9                        RET
                        ;
04AE  7C                CKHLDE: MOV  A,H
04AF  AA                        XRA  D                          ;SAME SIGN?
04B0  F2 B404                   JP   CK1                        ;YES, COMPARE
04B3  EB                        XCHG                            ;NO, XCH AND COMP
04B4  E7                CK1:    RST  4
04B5  C9                        RET
                        ;
                        ;*************************************************************
                        ;
                        ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
                        ;
                        ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
                        ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
                        ; TO THAT VALUE.
                        ;
                        ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
                        ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
                        ; NEXT LINE AND CONTINUE FROM THERE.
                        ;
                        ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
                        ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
                        ;
                        ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
                        ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
                        ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
                        ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
                        ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
                        ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
                        ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
                        ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
                        ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
                        ;
                        ; RELATED TO 'ERROR' ARE THE FOLLOWING:
                        ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
                        ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
                        ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
                        ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
                        ;
04B6  FF                SETVAL: RST  7                          ;*** SETVAL ***
04B7  DA DC04                   JC   QWHAT                      ;"WHAT?" NO VARIABLE
04BA  E5                        PUSH H                          ;SAVE ADDRESS OF VAR.
04BB  CF                        RST  1                          ;PASS "=" SIGN
04BC  3D                        DB   '='
04BD  08                        DB   SV1-$-1
04BE  DF                        RST  3                          ;EVALUATE EXPR.
04BF  44                        MOV  B,H                        ;VALUE IS IN BC NOW
04C0  4D                        MOV  C,L
04C1  E1                        POP  H                          ;GET ADDRESS
04C2  71                        MOV  M,C                        ;SAVE VALUE
04C3  23                        INX  H
04C4  70                        MOV  M,B
04C5  C9                        RET
04C6  C3 DC04           SV1:    JMP  QWHAT                      ;NO "=" SIGN
                        ;
04C9  CF                FIN:    RST  1                          ;*** FIN ***
04CA  3B                        DB   3BH
04CB  04                        DB   FI1-$-1
04CC  F1                        POP  PSW                        ;";", PURGE RET. ADDR.
04CD  C3 5C01                   JMP  RUNSML                     ;CONTINUE SAME LINE
04D0  CF                FI1:    RST  1                          ;NOT ";", IS IT CR?
04D1  0D                        DB   CR
04D2  04                        DB   FI2-$-1
04D3  F1                        POP  PSW                        ;YES, PURGE RET. ADDR.
04D4  C3 4C01                   JMP  RUNNXL                     ;RUN NEXT LINE
04D7  C9                FI2:    RET                             ;ELSE RETURN TO CALLER
                        ;
04D8  EF                ENDCHK: RST  5                          ;*** ENDCHK ***
04D9  FE 0D                     CPI  CR                         ;END WITH CR?
04DB  C8                        RZ                              ;OK, ELSE SAY: "WHAT?"
                        ;
04DC  D5                QWHAT:  PUSH D                          ;*** QWHAT ***
04DD  11 AE00           AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
04E0  97                ERROR:  SUB  A                          ;*** ERROR ***
04E1  CD 7605                   CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
04E4  D1                        POP  D                          ;OR 'SORRY'
04E5  1A                        LDAX D                          ;SAVE THE CHARACTER
04E6  F5                        PUSH PSW                        ;AT WHERE OLD DE ->
04E7  97                        SUB  A                          ;AND PUT A 0 THERE
04E8  12                        STAX D
04E9  2A 0180                   LHLD CURRNT                     ;GET CURRENT LINE #
04EC  E5                        PUSH H
04ED  7E                        MOV  A,M                        ;CHECK THE VALUE
04EE  23                        INX  H
04EF  B6                        ORA  M
04F0  D1                        POP  D
04F1  CA BA00                   JZ   RSTART                     ;IF ZERO, JUST RESTART
04F4  7E                        MOV  A,M                        ;IF NEGATIVE,
04F5  B7                        ORA  A
04F6  FA D902                   JM   INPERR                     ;REDO INPUT
04F9  CD E805                   CALL PRTLN                      ;ELSE PRINT THE LINE
04FC  1B                        DCX  D                          ;UPTO WHERE THE 0 IS
04FD  F1                        POP  PSW                        ;RESTORE THE CHARACTER
04FE  12                        STAX D
04FF  3E 3F                     MVI  A,3FH                      ;PRINT A "?"
0501  D7                        RST  2
0502  97                        SUB  A                          ;AND THE REST OF THE
0503  CD 7605                   CALL PRTSTG                     ;LINE
0506  C3 BA00                   JMP  RSTART                     ;THEN RESTART
                        ;
0509  D5                QSORRY: PUSH D                          ;*** QSORRY ***
050A  11 B400           ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
050D  C3 E004                   JMP  ERROR
                        ;
                        ;*************************************************************
                        ;
                        ; *** GETLN *** FNDLN (& FRIENDS) ***
                        ;
                        ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
                        ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
                        ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
                        ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
                        ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
                        ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
                        ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
                        ;
                        ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
                        ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
                        ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
                        ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
                        ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
                        ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
                        ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
                        ; LINE, FLAGS ARE C & NZ.
                        ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
                        ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
                        ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
                        ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
                        ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
                        ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
                        ;
0510  D7                GETLN:  RST  2                          ;*** GETLN ***
0511  11 37FE                   LXI  D,BUFFER                   ;PROMPT AND INIT.
0514  CD 9406           GL1:    CALL CHKIO                      ;CHECK KEYBOARD
0517  CA 1405                   JZ   GL1                        ;NO INPUT, WAIT
051A  FE 7F                     CPI  7FH                        ;DELETE LAST CHARACTER?
051C  CA 3905                   JZ   GL3                        ;YES
051F  D7                        RST  2                          ;INPUT, ECHO BACK
0520  FE 0A                     CPI  0AH                        ;IGNORE LF
0522  CA 1405                   JZ   GL1
0525  B7                        ORA  A                          ;IGNORE NULL
0526  CA 1405                   JZ   GL1
0529  FE 7D                     CPI  7DH                        ;DELETE THE WHOLE LINE?
052B  CA 4605                   JZ   GL4                        ;YES
052E  12                        STAX D                          ;ELSE SAVE INPUT
052F  13                        INX  D                          ;AND BUMP POINTER
0530  FE 0D                     CPI  0DH                        ;WAS IT CR?
0532  C8                        RZ                              ;YES, END OF LINE
0533  7B                        MOV  A,E                        ;ELSE MORE FREE ROOM?
0534  FE 77                     CPI  BUFEND & 0FFH
0536  C2 1405                   JNZ  GL1                        ;YES, GET NEXT INPUT
0539  7B                GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
053A  FE 37                     CPI  BUFFER & 0FFH            ;BUT DO WE HAVE ANY?
053C  CA 4605                   JZ   GL4                        ;NO, REDO WHOLE LINE
053F  1B                        DCX  D                          ;YES, BACKUP POINTER
0540  3E 5C                     MVI  A,5CH                      ;AND ECHO A BACK-SLASH
0542  D7                        RST  2
0543  C3 1405                   JMP  GL1                        ;GO GET NEXT INPUT
0546  CD 0E00           GL4:    CALL CRLF                       ;REDO ENTIRE LINE
0549  3E 5E                     MVI  A,05EH                     ;CR, LF AND UP-ARROW
054B  C3 1005                   JMP  GETLN
                        ;
054E  7C                FNDLN:  MOV  A,H                        ;*** FNDLN ***
054F  B7                        ORA  A                          ;CHECK SIGN OF HL
0550  FA 9F00                   JM   QHOW                       ;IT CANNOT BE -
0553  11 1880                   LXI  D,TXTBGN                   ;INIT TEXT POINTER
                        ;
0556                    FNDLP:                                  ;*** FDLNP ***
0556  E5                FL1:    PUSH H                          ;SAVE LINE #
0557  2A 1580                   LHLD TXTUNF                     ;CHECK IF WE PASSED END
055A  2B                        DCX  H
055B  E7                        RST  4
055C  E1                        POP  H                          ;GET LINE # BACK
055D  D8                        RC                              ;C,NZ PASSED END
055E  1A                        LDAX D                          ;WE DID NOT, GET BYTE 1
055F  95                        SUB  L                          ;IS THIS THE LINE?
0560  47                        MOV  B,A                        ;COMPARE LOW ORDER
0561  13                        INX  D
0562  1A                        LDAX D                          ;GET BYTE 2
0563  9C                        SBB  H                          ;COMPARE HIGH ORDER
0564  DA 6B05                   JC   FL2                        ;NO, NOT THERE YET
0567  1B                        DCX  D                          ;ELSE WE EITHER FOUND
0568  B0                        ORA  B                          ;IT, OR IT IS NOT THERE
0569  C9                        RET                             ;NC,Z:FOUND, NC,NZ:NO
                        ;
056A                    FNDNXT:                                 ;*** FNDNXT ***
056A  13                        INX  D                          ;FIND NEXT LINE
056B  13                FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
                        ;
056C  1A                FNDSKP: LDAX D                          ;*** FNDSKP ***
056D  FE 0D                     CPI  CR                         ;TRY TO FIND CR
056F  C2 6B05                   JNZ  FL2                        ;KEEP LOOKING
0572  13                        INX  D                          ;FOUND CR, SKIP OVER
0573  C3 5605                   JMP  FL1                        ;CHECK IF END OF TEXT
                        ;
                        ;*************************************************************
                        ;
                        ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
                        ;
                        ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
                        ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
                        ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
                        ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
                        ;
                        ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
                        ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
                        ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
                        ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
                        ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
                        ; OVER (USUALLY A JUMP INSTRUCTION.
                        ;
                        ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
                        ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
                        ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
                        ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
                        ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
                        ;
                        ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
                        ;
0576  47                PRTSTG: MOV  B,A                        ;*** PRTSTG ***
0577  1A                PS1:    LDAX D                          ;GET A CHARACTER
0578  13                        INX  D                          ;BUMP POINTER
0579  B8                        CMP  B                          ;SAME AS OLD A?
057A  C8                        RZ                              ;YES, RETURN
057B  D7                        RST  2                          ;ELSE PRINT IT
057C  FE 0D                     CPI  CR                         ;WAS IT A CR?
057E  C2 7705                   JNZ  PS1                        ;NO, NEXT
0581  C9                        RET                             ;YES, RETURN
                        ;
0582  CF                QTSTG:  RST  1                          ;*** QTSTG ***
0583  22                        DB   '"'
0584  0F                        DB   QT3-$-1
0585  3E 22                     MVI  A,22H                      ;IT IS A "
0587  CD 7605           QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
058A  FE 0D                     CPI  CR                         ;WAS LAST ONE A CR?
058C  E1                        POP  H                          ;RETURN ADDRESS
058D  CA 4C01                   JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
0590  23                QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
0591  23                        INX  H
0592  23                        INX  H
0593  E9                        PCHL                            ;RETURN
0594  CF                QT3:    RST  1                          ;IS IT A '?
0595  27                        DB   27H
0596  05                        DB   QT4-$-1
0597  3E 27                     MVI  A,27H                      ;YES, DO THE SAME
0599  C3 8705                   JMP  QT1                        ;AS IN "
059C  CF                QT4:    RST  1                          ;IS IT BACK-ARROW?
059D  5F                        DB   5FH
059E  08                        DB   QT5-$-1
059F  3E 8D                     MVI  A,08DH                     ;YES, CR WITHOUT LF
05A1  D7                        RST  2                          ;DO IT TWICE TO GIVE
05A2  D7                        RST  2                          ;TTY ENOUGH TIME
05A3  E1                        POP  H                          ;RETURN ADDRESS
05A4  C3 9005                   JMP  QT2
05A7  C9                QT5:    RET                             ;NONE OF ABOVE
                        ;
05A8  06 00             PRTNUM: MVI  B,0                        ;*** PRTNUM ***
05AA  CD 9904                   CALL CHKSGN                     ;CHECK SIGN
05AD  F2 B305                   JP   PN1                        ;NO SIGN
05B0  06 2D                     MVI  B,'-'                      ;B=SIGN
05B2  0D                        DCR  C                          ;'-' TAKES SPACE
05B3  D5                PN1:    PUSH D                          ;SAVE
05B4  11 0A00                   LXI  D,0AH                      ;DECIMAL
05B7  D5                        PUSH D                          ;SAVE AS A FLAG
05B8  0D                        DCR  C                          ;C=SPACES
05B9  C5                        PUSH B                          ;SAVE SIGN & SPACE
05BA  CD 7C04           PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
05BD  78                        MOV  A,B                        ;RESULT 0?
05BE  B1                        ORA  C
05BF  CA CA05                   JZ   PN3                        ;YES, WE GOT ALL
05C2  E3                        XTHL                            ;NO, SAVE REMAINDER
05C3  2D                        DCR  L                          ;AND COUNT SPACE
05C4  E5                        PUSH H                          ;HL IS OLD BC
05C5  60                        MOV  H,B                        ;MOVE RESULT TO BC
05C6  69                        MOV  L,C
05C7  C3 BA05                   JMP  PN2                        ;AND DIVIDE BY 10
05CA  C1                PN3:    POP  B                          ;WE GOT ALL DIGITS IN
05CB  0D                PN4:    DCR  C                          ;THE STACK
05CC  79                        MOV  A,C                        ;LOOK AT SPACE COUNT
05CD  B7                        ORA  A
05CE  FA D705                   JM   PN5                        ;NO LEADING BLANKS
05D1  3E 20                     MVI  A,20H                      ;LEADING BLANKS
05D3  D7                        RST  2
05D4  C3 CB05                   JMP  PN4                        ;MORE?
05D7  78                PN5:    MOV  A,B                        ;PRINT SIGN
05D8  B7                        ORA  A
05D9  C4 1000                   CNZ  10H
05DC  5D                        MOV  E,L                        ;LAST REMAINDER IN E
05DD  7B                PN6:    MOV  A,E                        ;CHECK DIGIT IN E
05DE  FE 0A                     CPI  0AH                        ;10 IS FLAG FOR NO MORE
05E0  D1                        POP  D
05E1  C8                        RZ                              ;IF SO, RETURN
05E2  C6 30                     ADI  30H                        ;ELSE CONVERT TO ASCII
05E4  D7                        RST  2                          ;AND PRINT THE DIGIT
05E5  C3 DD05                   JMP  PN6                        ;GO BACK FOR MORE
                        ;
05E8  1A                PRTLN:  LDAX D                          ;*** PRTLN ***
05E9  6F                        MOV  L,A                        ;LOW ORDER LINE #
05EA  13                        INX  D
05EB  1A                        LDAX D                          ;HIGH ORDER
05EC  67                        MOV  H,A
05ED  13                        INX  D
05EE  0E 04                     MVI  C,4H                       ;PRINT 4 DIGIT LINE #
05F0  CD A805                   CALL PRTNUM
05F3  3E 20                     MVI  A,20H                      ;FOLLOWED BY A BLANK
05F5  D7                        RST  2
05F6  97                        SUB  A                          ;AND THEN THE NEXT
05F7  CD 7605                   CALL PRTSTG
05FA  C9                        RET
                        ;
                        ;*************************************************************
                        ;
                        ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
                        ;
                        ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
                        ; DE = HL
                        ;
                        ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
                        ; UNTIL DE = BC
                        ;
                        ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
                        ; STACK
                        ;
                        ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
                        ; STACK
                        ;
05FB  E7                MVUP:   RST  4                          ;*** MVUP ***
05FC  C8                        RZ                              ;DE = HL, RETURN
05FD  1A                        LDAX D                          ;GET ONE BYTE
05FE  02                        STAX B                          ;MOVE IT
05FF  13                        INX  D                          ;INCREASE BOTH POINTERS
0600  03                        INX  B
0601  C3 FB05                   JMP  MVUP                       ;UNTIL DONE
                        ;
0604  78                MVDOWN: MOV  A,B                        ;*** MVDOWN ***
0605  92                        SUB  D                          ;TEST IF DE = BC
0606  C2 0C06                   JNZ  MD1                        ;NO, GO MOVE
0609  79                        MOV  A,C                        ;MAYBE, OTHER BYTE?
060A  93                        SUB  E
060B  C8                        RZ                              ;YES, RETURN
060C  1B                MD1:    DCX  D                          ;ELSE MOVE A BYTE
060D  2B                        DCX  H                          ;BUT FIRST DECREASE
060E  1A                        LDAX D                          ;BOTH POINTERS AND
060F  77                        MOV  M,A                        ;THEN DO IT
0610  C3 0406                   JMP  MVDOWN                     ;LOOP BACK
                        ;
0613  C1                POPA:   POP  B                          ;BC = RETURN ADDR.
0614  E1                        POP  H                          ;RESTORE LOPVAR, BUT
0615  22 0980                   SHLD LOPVAR                     ;=0 MEANS NO MORE
0618  7C                        MOV  A,H
0619  B5                        ORA  L
061A  CA 2D06                   JZ   PP1                        ;YEP, GO RETURN
061D  E1                        POP  H                          ;NOP, RESTORE OTHERS
061E  22 0B80                   SHLD LOPINC
0621  E1                        POP  H
0622  22 0D80                   SHLD LOPLMT
0625  E1                        POP  H
0626  22 0F80                   SHLD LOPLN
0629  E1                        POP  H
062A  22 1180                   SHLD LOPPT
062D  C5                PP1:    PUSH B                          ;BC = RETURN ADDR.
062E  C9                        RET
                        ;
062F  21 78FE           PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
0632  CD 9C04                   CALL CHGSGN
0635  C1                        POP  B                          ;BC=RETURN ADDRESS
0636  39                        DAD  SP                         ;IS STACK NEAR THE TOP?
0637  D2 0905                   JNC  QSORRY                     ;YES, SORRY FOR THAT
063A  2A 0980                   LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
063D  7C                        MOV  A,H                        ;BUT IF LOPVAR IS 0
063E  B5                        ORA  L                          ;THAT WILL BE ALL
063F  CA 5506                   JZ   PU1
0642  2A 1180                   LHLD LOPPT                      ;ELSE, MORE TO SAVE
0645  E5                        PUSH H
0646  2A 0F80                   LHLD LOPLN
0649  E5                        PUSH H
064A  2A 0D80                   LHLD LOPLMT
064D  E5                        PUSH H
064E  2A 0B80                   LHLD LOPINC
0651  E5                        PUSH H
0652  2A 0980                   LHLD LOPVAR
0655  E5                PU1:    PUSH H
0656  C5                        PUSH B                          ;BC = RETURN ADDR.
0657  C9                        RET
                        ;
                        ;*************************************************************
                        ;
                        ; *** OUTC *** & CHKIO ***
                        ;
                        ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
                        ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
                        ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
                        ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
                        ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
                        ; ARE RESTORED.
                        ;
                        ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
                        ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
                        ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
                        ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
                        ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
                        ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
                        ;
                        ;OUTC:  PUSH PSW                        ;THIS IS AT LOC. 10
                        ;       LDA  OCSW                       ;CHECK SOFTWARE SWITCH
                        ;       ORA  A
0658  32 0080           INIT:   STA  OCSW
                                ; Insert custom init code here
065B  CD 2708                   call scrclr
                                ; End custom init code
065E  16 19                     MVI  D,19H
0660                    PATLOP:
0660  CD 0E00                   CALL CRLF
0663  15                        DCR  D
0664  C2 6006                   JNZ  PATLOP
0667  97                        SUB  A
0668  11 B506                   LXI  D,MSG1
066B  CD 7605                   CALL PRTSTG
066E  21 0000                   LXI  H,START
0671  22 1380                   SHLD RANPNT
0674  21 1880                   LXI  H,TXTBGN
0677  22 1580                   SHLD TXTUNF
067A  C3 BA00                   JMP  RSTART
067D  C2 8206           OC2:    JNZ  OC3                        ;IT IS ON
0680  F1                        POP  PSW                        ;IT IS OFF
0681  C9                        RET                             ;RESTORE AF AND RETURN
                                ; Output character
                                ; Start of loop to check if transmit buffer is empty
0682                    OC3:
                        ;        IN   transmit_status            ;Check status FIXME
                        ;        ANI  1H                         ;STATUS BIT
                        ;        JZ   OC3                        ;NOT READY, WAIT
0682  F1                        POP  PSW                        ;READY, GET OLD A BACK
                                ; Write data to transmit buffer
                        ;        OUT  transmit_buffer            ;Out to data port FIXME
0683  C5                        push    b                       ; Save BC
0684  F5                        push    psw                     ; Save A and flags
0685  4F                        mov     c, a                    ; Transmit char in C
0686  CD E807                   call    cout                    ; Transmit
0689  F1                        pop     psw                     ; Restore A and flags
068A  C1                        pop     b                       ; Restore BC

068B  FE 0D                     CPI  CR                         ;WAS IT CR?
068D  C0                        RNZ                             ;NO, FINISHED
068E  3E 0A                     MVI  A,LF                       ;YES, WE SEND LF TOO
0690  D7                        RST  2                          ;THIS IS RECURSIVE
0691  3E 0D                     MVI  A,CR                       ;GET CR BACK IN A
0693  C9                        RET
                        ;
0694                    CHKIO:
                                ; Tiny BASIC wants this to be a check status & return or read char routine
                                ; So we'll check if the line is low. If not, we return
0694  CD 8707                   call    checkline
0697  C8                        rz
                                ; Go get character
0698  C5                        push    b                       ; Save BC
0699  CD B907                   call    cin                     ; Get character
069C  79                        mov     a, c                    ; Save character to A
069D  C1                        pop     b                       ; Restore BC
069E  E6 7F                     ANI  7FH                        ;MASK BIT 7 OFF
06A0  FE 0F                     CPI  0FH                        ;IS IT CONTROL-O?
06A2  C2 AF06                   JNZ  CI1                        ;NO, MORE CHECKING
06A5  3A 0080                   LDA  OCSW                       ;CONTROL-O FLIPS OCSW
06A8  2F                        CMA                             ;ON TO OFF, OFF TO ON
06A9  32 0080                   STA  OCSW
06AC  C3 9406                   JMP  CHKIO                      ;GET ANOTHER INPUT
06AF  FE 03             CI1:    CPI  03H                        ;IS IT CTRL+C?
06B1  C0                        RNZ                             ;NO, RETURN "NZ"
06B2  C3 BA00                   JMP  RSTART                     ;YES, RESTART TBI
                        ;
06B5  54494E59 20       MSG1:   DB   'TINY '
06BA  42415349 43               DB   'BASIC'
06BF  0D                        DB   CR
                        ;
                        ;*************************************************************
                        ;
                        ; *** TABLES *** DIRECT *** & EXEC ***
                        ;
                        ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
                        ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
                        ; OF CODE ACCORDING TO THE TABLE.
                        ;
                        ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
                        ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
                        ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
                        ; ALL DIRECT AND STATEMENT COMMANDS.
                        ;
                        ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
                        ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
                        ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
                        ;
                        ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
                        ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
                        ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
                        ; BYTE SET TO 1.
                        ;
                        ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
                        ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
                        ; MATCH THIS NULL ITEM AS DEFAULT.
                        ;
06C0                    TAB1:                                   ;DIRECT COMMANDS
06C0  4C495354                  DB      'LIST'
06C4                            DWA     LIST    ;        DRW  LIST
06C6  52554E                    DB      'RUN'
06C9                            DWA     RUN
06CB  4E4557                    DB      'NEW'
06CE                            DWA     NEW
06D0  53415645          		DB 		'SAVE'
06D4                    		DWA		SAVE
                        ;
06D6                    TAB2:                                   ;DIRECT/STATEMENT
06D6  4E455854                  DB   'NEXT'
06DA                            DWA  NEXT
06DC  4C4554                    DB   'LET'
06DF                            DWA  LET
06E1  4946                      DB   'IF'
06E3                            DWA  IFF
06E5  474F544F                  DB   'GOTO'
06E9                            DWA  GOTO
06EB  474F5355 42               DB   'GOSUB'
06F0                            DWA  GOSUB
06F2  52455455 524E             DB   'RETURN'
06F8                            DWA  RETURN
06FA  52454D                    DB   'REM'
06FD                            DWA  REM
06FF  464F52                    DB   'FOR'
0702                            DWA  FOR
0704  494E5055 54               DB   'INPUT'
0709                            DWA  INPUT
070B  5052494E 54               DB   'PRINT'
0710                            DWA  PRINT
0712  53544F50                  DB   'STOP'
0716                            DWA  STOP
0718  42454550          		DB 'BEEP'
071C                    		DWA BEEP
071E                            DWA  DEFLT
                        ;
0720                    TAB4:                                   ;FUNCTIONS
0720  524E44                    DB   'RND'
0723                            DWA  RND
0725  414253                    DB   'ABS'
0728                            DWA  ABS
072A  53495A45                  DB   'SIZE'
072E                            DWA  SIZE
0730                            DWA  XP40
                        ;
0732                    TAB5:                                   ;"TO" IN "FOR"
0732  544F                      DB   'TO'
0734                            DWA  FR1
0736                            DWA  QWHAT
                        ;
0738                    TAB6:                                   ;"STEP" IN "FOR"
0738  53544550                  DB   'STEP'
073C                            DWA  FR2
073E                            DWA  FR3
                        ;
0740                    TAB8:                                   ;RELATION OPERATORS
0740  3E3D                      DB   '>='
0742                            DWA  XP11
0744  23                        DB   '#'
0745                            DWA  XP12
0747  3E                        DB   '>'
0748                            DWA  XP13
074A  3D                        DB   '='
074B                            DWA  XP15
074D  3C3D                      DB   '<='
074F                            DWA  XP14
0751  3C                        DB   '<'
0752                            DWA  XP16
0754                            DWA  XP17
                        ;
0756  21 BF06           DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
                        ;
0759                    EXEC:                                   ;*** EXEC ***
0759  EF                EX0:    RST  5                          ;IGNORE LEADING BLANKS
075A  D5                        PUSH D                          ;SAVE POINTER
075B  1A                EX1:    LDAX D                          ;IF FOUND '.' IN STRING
075C  13                        INX  D                          ;BEFORE ANY MISMATCH
075D  FE 2E                     CPI  2EH                        ;WE DECLARE A MATCH
075F  CA 7807                   JZ   EX3
0762  23                        INX  H                          ;HL->TABLE
0763  BE                        CMP  M                          ;IF MATCH, TEST NEXT
0764  CA 5B07                   JZ   EX1
0767  3E 7F                     MVI  A,07FH                     ;ELSE SEE IF BIT 7
0769  1B                        DCX  D                          ;OF TABLE IS SET, WHICH
076A  BE                        CMP  M                          ;IS THE JUMP ADDR. (HI)
076B  DA 7F07                   JC   EX5                        ;C:YES, MATCHED
076E  23                EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
076F  BE                        CMP  M
0770  D2 6E07                   JNC  EX2
0773  23                        INX  H                          ;BUMP TO NEXT TAB. ITEM
0774  D1                        POP  D                          ;RESTORE STRING POINTER
0775  C3 5907                   JMP  EX0                        ;TEST AGAINST NEXT ITEM
0778  3E 7F             EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
077A  23                EX4:    INX  H                          ;JUMP ADDR., WHICH IS
077B  BE                        CMP  M                          ;FLAGGED BY BIT 7
077C  D2 7A07                   JNC  EX4
077F  7E                EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
0780  23                        INX  H                          ;ADDRESS FROM THE TABLE
0781  6E                        MOV  L,M
0782  E6 7F                     ANI  7FH                        ;MASK OFF BIT 7
0784  67                        MOV  H,A
0785  F1                        POP  PSW                        ;CLEAN UP THE GABAGE
0786  E9                        PCHL                            ;AND WE GO DO IT
                        ;
                        ; -----------------------------------------------------------------------------
                        ; 8085A serial line routine
                        ; From Intel Application Note AP-29 August 1977 with inputs from "Microprocessor 8085 and
                        ; Its Interfacing" By Sunil Mathur

      = 0030            sim     .equ    030h    ; ASMX doesn't seem to recognize these 8085 instructions
      = 0020            rim     .equ    020h

                        ; bittime calculation is
                        ; bittime = 104167/baudrate - 3.667
                        ;bittime .equ    032h   ; 2400 baud for 6.144MHz clock
                        ;bittime .equ   028h    ; 2400 baud for 5MHz clock
                        ;bittime .equ 53h		; 1200 baud for 5MHz clock
      = 0158            bittime .equ 	158h	; 300 baud for 5MHz clock
                        ;halfbit .equ   018h   	; 19h
                        ;halfbit .equ   15h		; for 5MHz clock
                        ;halfbit .equ	25h
      = 00AC            halfbit .equ    0ACh
      = 000B            numbits .equ    11      ; Two stop bits
      = 0009            inbits  .equ    9       ; One stop bit

                        ; Check if SID is low
0787                    checkline:
0787  20                        db      rim
0788  B7                        ora     a
0789  F2 8D07                   jp      checkline0      ; Line is low
078C  AF                        xra     a               ; Set zero flag
078D                    checkline0:                     ; zero flag = 0
078D  C9                        ret

                        ; Wait half bit time (1 cycle less than actual)
078E                    halfbitloop:
078E  11 AC00                   lxi     d, halfbit
0791  F2 9707                   jp      bl1
                        ; Wait full bit time
0794                    bitloop:
0794  11 5801                   lxi     d, bittime  ; 10T 1a3h
0797                    bl1:
0797  1B                        dcx     d       ; 6T
0798  7B                        mov     a, e    ; 4T
0799  B2                        ora     d       ; 4T
079A  C2 9707                   jnz     bl1     ; 10T/7T
079D  C9                        ret             ; 10T

                        ; Serial transmit
                        ; C = value to transmit
                        ; Changes A
                        ; Preserves BC
079E                    sout:
079E  D5                        push    d
079F  C5                        push    b
07A0  E5                        push    h
07A1  F3                        di
07A2  AF                        xra     a       ; Clear cy
07A3  06 0B                     mvi     b, numbits
07A5                    so1:
07A5  3E 80                     mvi     a, 80h  ; 7T
07A7  1F                        rar             ; 4T
07A8  30                        db      sim
07A9  CD 9407                   call    bitloop ; 17T
07AC  37                        stc             ; 4T
07AD  79                        mov     a, c    ; 5T
07AE  1F                        rar             ; 4T
07AF  4F                        mov     c, a    ; 5T
07B0  05                        dcr     b       ; 5T
07B1  C2 A507                   jnz     so1     ; 10T
07B4  E1                        pop     h
07B5  C1                        pop     b
07B6  D1                        pop     d
                        		;call pal_cout
07B7  FB                        ei
07B8  C9                        ret

                        ; Serial receive
                        ; Input character
                        ; Character in C
                        ; Changes A & B
07B9                    cin:
07B9  F3                        di
07BA  D5                        push    d
07BB  E5                        push    h
07BC  06 09                     mvi     b, inbits
07BE                    cix1:
07BE  20                        db      rim     ; RIM
07BF  B7                        ora     a
07C0  FA BE07                   jm      cix1     ; Wait for start bit
                                ; Go to middle of start bit
07C3  CD 8E07                   call    halfbitloop
                                ; Go to middle of next bit
07C6                    ci3:
07C6  CD 9407                   call    bitloop
                                ; Read in next bit
07C9  20                        db      rim
07CA  17                        ral             ; Bit in cy
07CB  05                        dcr     b
07CC  CA D607                   jz      ci5     ; First stop bit, quit
07CF  79                        mov     a,c     ; Rotate partial char in to C
07D0  1F                        rar
07D1  4F                        mov     c, a
07D2  00                        nop             ; cin and cout loop times are the same
07D3  C3 C607                   jmp     ci3
07D6                    ci5:
07D6  E1                        pop     h
07D7  D1                        pop     d
                        		; to uppercase
07D8  79                		mov a, c
07D9  FE 61             		cpi 'a'
07DB  DA E607           		jc ci6
07DE  FE 7B             		cpi 'z' + 1
07E0  D2 E607           		jnc ci6
07E3  C6 E0             		adi 'A' - 'a'
07E5  4F                		mov c, a
07E6                    ci6:		
07E6  FB                        ei
07E7  C9                        ret


                        ; PAL driver

                        ; video ram starting address
      = 3800            vram 		equ 3800h 		; +64 is a one line offset
      = 0800            vramsize 	equ 800h		;
      = 0040            linelen		equ 64
      = 3F00            lastline	equ vram + 64 * 28		; address of the beginning of the last visible line
      = 0008            offs		equ 8			; first character is displayed starting from pos. 8 in the line, previous characters are covered by the horizontal blanking

07E8                    cout:
07E8  3A 1780           	lda Saving
07EB  FE 00             	cpi 0
07ED  CA F407           	jz cout0
07F0  CD 9E07           	call sout
07F3  C9                	ret
07F4                    cout0:
07F4  C5                	push b
07F5  D5                	push d
07F6  E5                	push h
07F7  79                	mov a, c
07F8  E6 FF             	ani 011111111b		; make sure cursor is off
07FA  FE 0D             	cpi 13				; check for new line character
07FC  CA 1A08           	jz cout1			; if new line, scroll
07FF  FE 0A             	cpi 10				; check for carriage return character
0801  CA 2308           	jz cout2			; carriage return, ignore
0804  2A 79FE           	lhld VRAMADDR		; load the address of the next character to hl				
0807  77                	mov m, a			; store the character in vram at address hl					
0808  23                	inx h				; move hl to the next character								
0809  7D                	mov a, l
080A  E6 3F             	ani 00111111b		; isolate the column number
080C  FE 3A             	cpi 58				; check if we're beyond the last character in the line
080E  CA 1A08           	jz cout1			; if yes, scroll down
0811  3E 80             	mvi a, 10000000b	; cursor
0813  77                	mov m, a			; store the cursor
0814  22 79FE           	shld VRAMADDR
0817  C3 2308           	jmp cout2
081A                    cout1:
081A  3E 20             	mvi a, ' '			; draw a blank over where the cursor is...
081C  2A 79FE           	lhld VRAMADDR		; ... prior to scrolling, to avoid having a cursor...
081F  77                	mov m, a 			; ... at the end of each line
0820  CD 4108           	call scroll
0823                    cout2:
0823  E1                	pop h
0824  D1                	pop d
0825  C1                	pop b
0826  C9                	ret

                        ; clear screen
0827                    scrclr:
0827  21 0038           	lxi h, vram
082A  01 0008           	lxi b, vramsize
082D                    scrclr1:
082D  3E 20             	mvi a, 20h
082F  77                	mov m, a
0830  23                	inx h
0831  0B                	dcx b
0832  78                	mov a, b
0833  B1                	ora c
0834  C2 2D08           	jnz scrclr1
0837  21 083F           	lxi h, lastline + offs
083A  22 79FE           	shld VRAMADDR
083D  3E 80             	mvi a, 10000000b
083F  77                	mov m, a
0840  C9                	ret
                        	
                        ; scrolls the screen vertically
0841                    scroll:
0841  21 4038           	lxi h, vram + linelen		; source memory region - one line after the start of the vram, i.e. the beginning of the second line
0844  11 0038           	lxi d, vram					; target source region - beginning of vram
0847  01 C007           	lxi b, vramsize - linelen	; loop counter: set to size of vram minus one line
084A                    scroll1:						; loop over the vram
084A  7E                	mov a, m					; load a byte from vram from the source address
084B  12                	stax d						; store it in the target address (same as source but one line above)
084C  23                	inx h						; increment the source address
084D  13                	inx d						; increment the target address
084E  0B                	dcx b						; decrement the loop counter
084F  78                	mov a, b
0850  B1                	ora c						; check if both bytes of the loop counter are zero
0851  C2 4A08           	jnz scroll1					; if not, repeat
0854  21 083F           	lxi h, lastline + offs		; load the address of the beginning of the last line to HL
0857  22 79FE           	shld VRAMADDR				; store that as the value of the VRAMADDR variable (address of the next character to be printed)
085A  3E 80             	mvi a, 10000000b			; cursor
085C  77                	mov m, a					; store the cursor at the address of the next character to be printed
                        	; loop for clearing out the last line
085D  3E 00             	mvi a, 00h
085F  06 38             	mvi b, linelen - offs
0861                    scroll2:						
0861  23                	inx h
0862  77                	mov m, a
0863  05                	dcr b
0864  C2 6108           	jnz scroll2
0867  C9                	ret
                        	

                        	

                        		
                        ;
                        ; End of 8085 serial routines
                        ; -----------------------------------------------------------------------------
                        ;
0868                    LSTROM:                                 ;ALL ABOVE CAN BE ROM
                        ;       ORG  1000H                      ;HERE DOWN MUST BE RAM
8000                            ORG  8000H                      ; Assume 32KB RAM
8000   (0001)           OCSW:   DS   1                          ;SWITCH FOR OUTPUT
8001   (0002)           CURRNT: DS   2                          ;POINTS TO CURRENT LINE
8003   (0002)           STKGOS: DS   2                          ;SAVES SP IN 'GOSUB'
8005   (0002)           VARNXT: DS   2                          ;TEMP STORAGE
8007   (0002)           STKINP: DS   2                          ;SAVES SP IN 'INPUT'
8009   (0002)           LOPVAR: DS   2                          ;'FOR' LOOP SAVE AREA
800B   (0002)           LOPINC: DS   2                          ;INCREMENT
800D   (0002)           LOPLMT: DS   2                          ;LIMIT
800F   (0002)           LOPLN:  DS   2                          ;LINE NUMBER
8011   (0002)           LOPPT:  DS   2                          ;TEXT POINTER
8013   (0002)           RANPNT: DS   2                          ;RANDOM NUMBER POINTER
8015   (0002)           TXTUNF: DS   2                          ;->UNFILLED TEXT AREA
8017   (0001)           SAVING:	DS   1							; WHETHER A SAVE IS IN PROGRESS
8018   (0002)           TXTBGN: DS   2                          ;TEXT SAVE AREA BEGINS
                        ;       ORG  1366H
                        ;       ORG  1F00H
FE00                    	ORG  0FE00H			;for 32K RAM (256bytes less than STACK top
FE00   (0000)           TXTEND: DS   0                          ;TEXT SAVE AREA ENDS
FE00   (0037)           VARBGN: DS   55                         ;VARIABLE @(0)
FE37   (0040)           BUFFER: DS   64                         ;INPUT BUFFER
FE77   (0001)           BUFEND: DS   1                          ;BUFFER ENDS
FE78   (0001)           STKLMT: DS   1                          ;TOP LIMIT FOR STACK
                        ;
FE79   (0002)           VRAMADDR	DS   2						; current vram address (cursor position on screen)
                        ;       ORG  1400H
                        ;       ORG  2000H
FF00                    	ORG  0FF00H			;for 64K system -- 32k ROM, 32K RAM
FF00   (0000)           STACK:  DS   0                          ;STACK STARTS HERE
                        ;
      = 000D            CR      EQU  0DH
      = 000A            LF      EQU  0AH



FF00                            END

00000 Total Error(s)

ABS                0466    AHOW               00A0    ASORRY             050A
AWHAT              04DD    BEEP               01C9    BEP0               01CB
BITLOOP            0794    BITTIME            0158 E  BL1                0797
BUFEND             FE77    BUFFER             FE37    CHECKLINE          0787
CHECKLINE0         078D    CHGSGN             049C    CHKIO              0694
CHKSGN             0499    CI1                06AF    CI3                07C6
CI5                07D6    CI6                07E6    CIN                07B9
CIX1               07BE    CK1                04B4    CKHLDE             04AE
COUT               07E8    COUT0              07F4    COUT1              081A
COUT2              0823    CR                 000D E  CRLF               000E
CURRNT             8001    DEFLT              0333    DIRECT             0756
DIVIDE             047C    DV1                0487    DV2                0489
ENDCHK             04D8    ERROR              04E0    EX0                0759
EX1                075B    EX2                076E    EX3                0778
EX4                077A    EX5                077F    EXEC               0759
EXPR1              0343    EXPR2              0387    EXPR3              03BB
EXPR4              041B    FI1                04D0    FI2                04D7
FIN                04C9    FL1                0556    FL2                056B
FNDLN              054E    FNDLP              0556    FNDNXT             056A
FNDSKP             056C    FOR                020E    FR1                021E
FR2                0228    FR3                022C    FR4                022F
FR5                0232    FR7                0247    FR8                0268
GETLN              0510    GL1                0514    GL3                0539
GL4                0546    GOSUB              01D5    GOTO               0165
HALFBIT            00AC E  HALFBITLOOP        078E    HOW                00A6
IFF                02CA    INBITS             0009 E  INIT               0658
INPERR             02D9    INPUT              02E3    IP1                02E3
IP2                02F1    IP3                0301    IP4                032B
IP5                0332    LASTLINE           3F00 E  LET                0339
LF                 000A E  LINELEN            0040 E  LIST               0179
LOPINC             800B    LOPLMT             800D    LOPLN              800F
LOPPT              8011    LOPVAR             8009    LS1                0182
LSTROM             0868    LT1                0342    MD1                060C
MSG1               06B5    MVDOWN             0604    MVUP               05FB
NEW                0137    NEXT               026D    NUMBITS            000B E
NX0                0274    NX1                02AE    NX2                02C2
NX3                028C    NX4                029E    NX5                02C0
OC2                067D    OC3                0682    OCSW               8000
OFFS               0008 E  OK                 00AB    PARN               0430
PATLOP             0660    PN1                05B3    PN2                05BA
PN3                05CA    PN4                05CB    PN5                05D7
PN6                05DD    POPA               0613    PP1                062D
PR0                01A5    PR1                01AD    PR2                019C
PR3                01B3    PR6                01BC    PR8                01C0
PRINT              0191    PRTLN              05E8    PRTNUM             05A8
PRTSTG             0576    PS1                0577    PU1                0655
PUSHA              062F    QHOW               009F    QSORRY             0509
QT1                0587    QT2                0590    QT3                0594
QT4                059C    QT5                05A7    QTSTG              0582
QWHAT              04DC    RA1                0456    RANPNT             8013
REM                02C6    RETURN             01F5    RIM                0020 E
RND                043B    RSTART             00BA    RUN                0146
RUNNXL             014C    RUNSML             015C    RUNTSL             0155
SAVE               0174    SAVING             8017    SCRCLR             0827
SCRCLR1            082D    SCROLL             0841    SCROLL1            084A
SCROLL2            0861    SETVAL             04B6    SIM                0030 E
SIZE               046F    SO1                07A5    SORRY              00B4
SOUT               079E    SS1                0028    ST1                00C2
ST2                00D2    ST3                00DB    ST4                0110
STACK              FF00    START              0000    STKGOS             8003
STKINP             8007    STKLMT             FE78    STOP               0140
SUBDE              0492    SV1                04C6    TAB1               06C0
TAB2               06D6    TAB4               0720    TAB5               0732
TAB6               0738    TAB8               0740    TC1                0068
TC2                0073    TN1                007C    TSTNUM             0077
TV1                0058    TXTBGN             8018    TXTEND             FE00
TXTUNF             8015    VARBGN             FE00    VARNXT             8005
VRAM               3800 E  VRAMADDR           FE79    VRAMSIZE           0800 E
WHAT               00AE    XP11               0349    XP12               034F
XP13               0355    XP14               035C    XP15               0364
XP16               036A    XP17               0370    XP18               0372
XP21               0390    XP22               0393    XP23               0396
XP24               039D    XP25               03AE    XP26               03B1
XP31               03BE    XP32               03DB    XP33               03E3
XP34               03EE    XP35               040D    XP40               0421
XP41               042A    XP42               0437    XP43               0438
